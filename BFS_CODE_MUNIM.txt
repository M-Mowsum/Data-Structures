//BFS_CODE LANGUAGE_JAVA 
// Munim_Mowsum Roll_201115
//-----------------------------------------------------------------------------

import java.util.*;

public class BFS {
   static int vertex;
   static String yn;
   static int source;
   static int destination;
   static int edge;
   static int s;
   static int u;
   static final int white=0,grey=1,black=2; 
   static int color[]=new int[vertex];
   static int prev[]=new int[vertex];
   static int d[]=new int[vertex];
   
   static LinkedList<Integer>list[];
   
   
   @SuppressWarnings({ "unchecked", "static-access" })
public BFS(int vertex) {
       this.vertex = vertex;
       list = new LinkedList[vertex];
       for (int i = 0; i <vertex ; i++) {
           list[i] = new LinkedList<>();
       }
   }
   
   public void addEdge(int source,int destination) {
	   list[source].addFirst(destination);
	   list[destination].addFirst(source);
	   
   }
   @SuppressWarnings("null")
void Traverse(int s) {
	   int color[]=new int[vertex];
	   int prev[]=new int[vertex];
	   int d[]=new int[vertex];
	   
	   
	   for(u=0;u<vertex && u!=s;u++) {
		   
		   color[u]=white;
		   prev[u]=-1;
		   d[u]=Integer.MAX_VALUE;
		   
		   }
	   color[s]=grey;
	   d[s]=0;
	   prev[s]=-1;
	   
	   Queue<Integer>Q=new LinkedList<>();
	   Q.add(s);
	   
	   while(Q.size()!=0) {
		   u=Q.remove();
		   System.out.print(u+" ");
		   Iterator<Integer>vertex=list[u].listIterator();
		   while(vertex.hasNext()) {
			   int v=vertex.next();
			   if(color[v]==white) {
				   color[v]=grey;
				   d[v]=d[u]+1;
				   prev[v]=u;
				   Q.add(v);
			   }
		   }
		   color[u]=black;
	   }
	      
   }
	   
   
	@SuppressWarnings({ "resource", "unused" })
	public static void main(String[] args) {
		
		System.out.print("Enter the number of Nodes: ");
		Scanner in1=new Scanner(System.in);
		vertex=in1.nextInt();
		
		System.out.print("\nEnter the number of edge : ");
		Scanner ed1=new Scanner(System.in);
		edge=ed1.nextInt();
		
		BFS graph=new BFS(vertex);
		
		
		int wh = 0;
		while(wh<edge) {
		  System.out.println("\nAdd an edge :");
		  Scanner in2=new Scanner(System.in);
		  
		  System.out.print(" Enter the source : ");
		  Scanner in3=new Scanner(System.in);
		  int source = in1.nextInt();
		  System.out.print(" Enter the destination : ");
		  Scanner in4=new Scanner(System.in);
	      int destination = in1.nextInt();
	      
	      graph.addEdge(source,destination);
	      wh++;
		}
		System.out.print("\nEnter the Source vertex: ");
		Scanner in4=new Scanner(System.in);
		s=in4.nextInt();
		
		System.out.print("Final Visited Order : ");
		graph.Traverse(s);
			
			
		}
	 }